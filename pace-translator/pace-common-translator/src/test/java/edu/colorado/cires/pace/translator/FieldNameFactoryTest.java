package edu.colorado.cires.pace.translator;

import static org.junit.jupiter.api.Assertions.*;

import edu.colorado.cires.pace.data.object.Ship;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Stream;
import org.junit.jupiter.api.Test;

class FieldNameFactoryTest {

  @Test
  void getDefaultDeclaredFields() {
    assertEquals(
        Set.of("uuid", "name"),
        new HashSet<>(FieldNameFactory.getDefaultDeclaredFields(Ship.class))
    );
  }

  @Test
  void getSensorDeclaredFields() {
    assertEquals(
        Set.of("uuid", "name", "description", "hydrophoneId", "preampId", "position.x", "position.y", "position.z", "type"),
        new HashSet<>(FieldNameFactory.getSensorDeclaredFields(SensorType.audio))
    );
    assertEquals(
        Set.of("uuid", "name", "position.x", "position.y", "position.z", "description", "type"),
        new HashSet<>(FieldNameFactory.getSensorDeclaredFields(SensorType.depth))
    );
    assertEquals(
        Set.of("uuid", "name", "position.x", "position.y", "position.z", "description", "type", "sensorType", "properties"),
        new HashSet<>(FieldNameFactory.getSensorDeclaredFields(SensorType.other))
    );
  }

  @Test
  void getDatasetDeclaredFields() {
    assertEquals(
        Stream.of(
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "instrumentId",
            "startTime",
            "endTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "hydrophoneSensitivity",
            "frequencyRange",
            "gain",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName",
            "qualityAnalyst",
            "qualityAnalysisObjectives",
            "qualityAnalysisMethod",
            "qualityAssessmentDescription",
            "qualityEntries[0].startTime",
            "qualityEntries[0].endTime",
            "qualityEntries[0].minFrequency",
            "qualityEntries[0].maxFrequency",
            "qualityEntries[0].qualityLevel",
            "qualityEntries[0].comments",
            "deploymentTime",
            "recoveryTime",
            "comments",
            "sensors",
            "channels[0].sensor",
            "channels[0].startTime",
            "channels[0].endTime",
            "channels[0].sampleRates[0].startTime",
            "channels[0].sampleRates[0].endTime",
            "channels[0].sampleRates[0].sampleRate",
            "channels[0].sampleRates[0].sampleBits",
            "channels[0].dutyCycles[0].startTime",
            "channels[0].dutyCycles[0].endTime",
            "channels[0].dutyCycles[0].duration",
            "channels[0].dutyCycles[0].interval",
            "channels[0].gains[0].startTime",
            "channels[0].gains[0].endTime",
            "channels[0].gains[0].gain",
            "seaArea",
            "deploymentLocation.latitude",
            "deploymentLocation.longitude",
            "deploymentLocation.seaFloorDepth",
            "deploymentLocation.instrumentDepth",
            "recoveryLocation.latitude",
            "recoveryLocation.longitude",
            "recoveryLocation.seaFloorDepth",
            "recoveryLocation.instrumentDepth",
            "biologicalPath",
            "calibrationDocumentsPath",
            "datasetType",
            "locationType",
            "documentsPath",
            "navigationPath",
            "otherPath",
            "sourcePath",
            "temperaturePath",
            "uuid"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.AUDIO, LocationType.STATIONARY_MARINE).stream()
            .sorted()
            .toList()
    );

    assertEquals(
        Stream.of(
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "instrumentId",
            "startTime",
            "endTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "hydrophoneSensitivity",
            "frequencyRange",
            "gain",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName",
            "qualityAnalyst",
            "qualityAnalysisObjectives",
            "qualityAnalysisMethod",
            "qualityAssessmentDescription",
            "qualityEntries[0].startTime",
            "qualityEntries[0].endTime",
            "qualityEntries[0].minFrequency",
            "qualityEntries[0].maxFrequency",
            "qualityEntries[0].qualityLevel",
            "qualityEntries[0].comments",
            "deploymentTime",
            "recoveryTime",
            "comments",
            "sensors",
            "channels[0].sensor",
            "channels[0].startTime",
            "channels[0].endTime",
            "channels[0].sampleRates[0].startTime",
            "channels[0].sampleRates[0].endTime",
            "channels[0].sampleRates[0].sampleRate",
            "channels[0].sampleRates[0].sampleBits",
            "channels[0].dutyCycles[0].startTime",
            "channels[0].dutyCycles[0].endTime",
            "channels[0].dutyCycles[0].duration",
            "channels[0].dutyCycles[0].interval",
            "channels[0].gains[0].startTime",
            "channels[0].gains[0].endTime",
            "channels[0].gains[0].gain",
            "seaArea",
            "deploymentLocation.latitude",
            "deploymentLocation.longitude",
            "deploymentLocation.seaFloorDepth",
            "deploymentLocation.instrumentDepth",
            "recoveryLocation.latitude",
            "recoveryLocation.longitude",
            "recoveryLocation.seaFloorDepth",
            "recoveryLocation.instrumentDepth",
            "biologicalPath",
            "calibrationDocumentsPath",
            "datasetType",
            "locationType",
            "documentsPath",
            "navigationPath",
            "otherPath",
            "sourcePath",
            "temperaturePath",
            "uuid"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.CPOD, LocationType.STATIONARY_MARINE).stream()
            .sorted()
            .toList()
    );

    assertEquals(
        Stream.of(
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "startTime",
            "endTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName",
            "seaArea",
            "deploymentLocation.latitude",
            "deploymentLocation.longitude",
            "deploymentLocation.seaFloorDepth",
            "deploymentLocation.instrumentDepth",
            "recoveryLocation.latitude",
            "recoveryLocation.longitude",
            "recoveryLocation.seaFloorDepth",
            "recoveryLocation.instrumentDepth",
            "biologicalPath",
            "calibrationDocumentsPath",
            "datasetType",
            "locationType",
            "documentsPath",
            "navigationPath",
            "otherPath",
            "sourcePath",
            "temperaturePath",
            "uuid",
            "softwareNames",
            "softwareVersions",
            "softwareProtocolCitation",
            "softwareDescription",
            "softwareProcessingDescription"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.SOUND_CLIPS, LocationType.STATIONARY_MARINE).stream()
            .sorted()
            .toList()
    );

    assertEquals(
        Stream.of(
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "startTime",
            "endTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName",
            "qualityAnalyst",
            "qualityAnalysisObjectives",
            "qualityAnalysisMethod",
            "qualityAssessmentDescription",
            "qualityEntries[0].startTime",
            "qualityEntries[0].endTime",
            "qualityEntries[0].minFrequency",
            "qualityEntries[0].maxFrequency",
            "qualityEntries[0].qualityLevel",
            "qualityEntries[0].comments",
            "soundSource",
            "seaArea",
            "deploymentLocation.latitude",
            "deploymentLocation.longitude",
            "deploymentLocation.seaFloorDepth",
            "deploymentLocation.instrumentDepth",
            "recoveryLocation.latitude",
            "recoveryLocation.longitude",
            "recoveryLocation.seaFloorDepth",
            "recoveryLocation.instrumentDepth",
            "biologicalPath",
            "calibrationDocumentsPath",
            "datasetType",
            "locationType",
            "documentsPath",
            "navigationPath",
            "otherPath",
            "sourcePath",
            "temperaturePath",
            "uuid",
            "softwareNames",
            "softwareVersions",
            "softwareProtocolCitation",
            "softwareDescription",
            "softwareProcessingDescription",
            "analysisTimeZone",
            "analysisEffort",
            "sampleRate",
            "minFrequency",
            "maxFrequency"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.DETECTIONS, LocationType.STATIONARY_MARINE).stream()
            .sorted()
            .toList()
    );
    
    assertEquals(
        Stream.of(
            "uuid",
            "temperaturePath",
            "biologicalPath",
            "otherPath",
            "documentsPath",
            "calibrationDocumentsPath",
            "navigationPath",
            "sourcePath",
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "startTime",
            "endTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName",
            "audioStartTime",
            "audioEndTime",
            "qualityAnalyst",
            "qualityAnalysisObjectives",
            "qualityAnalysisMethod",
            "qualityAssessmentDescription",
            "qualityEntries[0].startTime",
            "qualityEntries[0].endTime",
            "qualityEntries[0].minFrequency",
            "qualityEntries[0].maxFrequency",
            "qualityEntries[0].qualityLevel",
            "qualityEntries[0].comments",
            "analysisTimeZone",
            "analysisEffort",
            "sampleRate",
            "minFrequency",
            "maxFrequency",
            "softwareNames",
            "softwareVersions",
            "softwareProtocolCitation",
            "softwareDescription",
            "softwareProcessingDescription",
            "seaArea",
            "deploymentLocation.latitude",
            "deploymentLocation.longitude",
            "deploymentLocation.seaFloorDepth",
            "deploymentLocation.instrumentDepth",
            "recoveryLocation.latitude",
            "recoveryLocation.longitude",
            "recoveryLocation.seaFloorDepth",
            "recoveryLocation.instrumentDepth",
            "datasetType",
            "locationType"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.SOUND_LEVEL_METRICS, LocationType.STATIONARY_MARINE).stream().sorted().toList()
    );
    
    assertEquals(
        Stream.of(
            "uuid",
            "temperaturePath",
            "biologicalPath",
            "otherPath",
            "documentsPath",
            "calibrationDocumentsPath",
            "navigationPath",
            "sourcePath",
            "seaArea",
            "deploymentLocation.latitude",
            "deploymentLocation.longitude",
            "deploymentLocation.seaFloorDepth",
            "deploymentLocation.instrumentDepth",
            "recoveryLocation.latitude",
            "recoveryLocation.longitude",
            "recoveryLocation.seaFloorDepth",
            "recoveryLocation.instrumentDepth",
            "datasetType",
            "locationType",
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "startTime",
            "endTime",
            "modeledFrequency",
            "softwareNames",
            "softwareVersions",
            "softwareProtocolCitation",
            "softwareDescription",
            "softwareProcessingDescription",
            "audioStartTime",
            "audioEndTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.SOUND_PROPAGATION_MODELS, LocationType.STATIONARY_MARINE).stream().sorted().toList()
    );

    assertEquals(
        Stream.of(
            "uuid",
            "temperaturePath",
            "biologicalPath",
            "otherPath",
            "documentsPath",
            "calibrationDocumentsPath",
            "navigationPath",
            "sourcePath",
            "seaArea",
            "locations[0].latitude",
            "locations[0].longitude",
            "locations[0].seaFloorDepth",
            "locations[0].instrumentDepth",
            "datasetType",
            "locationType",
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "startTime",
            "endTime",
            "modeledFrequency",
            "softwareNames",
            "softwareVersions",
            "softwareProtocolCitation",
            "softwareDescription",
            "softwareProcessingDescription",
            "audioStartTime",
            "audioEndTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.SOUND_PROPAGATION_MODELS, LocationType.MULTIPOINT_STATIONARY_MARINE).stream().sorted().toList()
    );

    assertEquals(
        Stream.of(
            "uuid",
            "temperaturePath",
            "biologicalPath",
            "otherPath",
            "documentsPath",
            "calibrationDocumentsPath",
            "navigationPath",
            "sourcePath",
            "seaArea",
            "vessel",
            "locationDerivationDescription",
            "datasetType",
            "locationType",
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "startTime",
            "endTime",
            "modeledFrequency",
            "softwareNames",
            "softwareVersions",
            "softwareProtocolCitation",
            "softwareDescription",
            "softwareProcessingDescription",
            "audioStartTime",
            "audioEndTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.SOUND_PROPAGATION_MODELS, LocationType.MOBILE_MARINE).stream().sorted().toList()
    );

    assertEquals(
        Stream.of(
            "uuid",
            "temperaturePath",
            "biologicalPath",
            "otherPath",
            "documentsPath",
            "calibrationDocumentsPath",
            "navigationPath",
            "sourcePath",
            "latitude",
            "longitude",
            "surfaceElevation",
            "instrumentElevation",
            "datasetType",
            "locationType",
            "siteOrCruiseName",
            "deploymentId",
            "datasetPackager",
            "projects",
            "publicReleaseDate",
            "scientists",
            "sponsors",
            "funders",
            "platform",
            "instrument",
            "startTime",
            "endTime",
            "modeledFrequency",
            "softwareNames",
            "softwareVersions",
            "softwareProtocolCitation",
            "softwareDescription",
            "softwareProcessingDescription",
            "audioStartTime",
            "audioEndTime",
            "preDeploymentCalibrationDate",
            "postDeploymentCalibrationDate",
            "calibrationDescription",
            "deploymentTitle",
            "deploymentPurpose",
            "deploymentDescription",
            "alternateSiteName",
            "alternateDeploymentName"
        ).sorted().toList(),
        FieldNameFactory.getDatasetDeclaredFields(DatasetType.SOUND_PROPAGATION_MODELS, LocationType.STATIONARY_TERRESTRIAL).stream().sorted().toList()
    );
  }
}